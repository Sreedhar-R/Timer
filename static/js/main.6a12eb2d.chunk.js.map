{"version":3,"sources":["Inputbox.js","App.js","reportWebVitals.js","index.js"],"names":["Inputbox","searchChange","date","days","hours","mins","secs","className","type","placeholder","onChange","onClick","App","onSearchChange","event","setState","input","target","value","onSubmit","state","update","console","log","setInterval","calculateTimer","required","Date","parse","clearInterval","Math","floor","minutes","seconds","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAgBeA,EAdE,YAAwD,IAAtDA,EAAqD,EAArDA,SAASC,EAA4C,EAA5CA,aAAaC,EAA+B,EAA/BA,KAAKC,EAA0B,EAA1BA,KAAKC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,KAC1D,OACI,sBAAKC,UAAU,UAAf,UACI,gDAAmBL,EAAnB,OACA,+BAAKC,EAAL,SAAiBC,EAAjB,UAA+BC,EAA/B,SAA2CC,EAA3C,YACA,gCACI,uBAAOE,KAAK,OAAOC,YAAY,2BAA2BC,SAAUT,IACpE,wBAAQU,QAASX,EAAjB,2BCmEDY,E,kDAnEb,aAAc,IAAD,8BACX,gBAWFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,MAAMF,EAAMG,OAAOC,SAbvB,EAebC,SAAW,WACT,EAAKjB,KAAO,EAAKkB,MAAMJ,MACvB,EAAKD,SAAS,CAACM,OAAO,EAAKnB,OAC3BoB,QAAQC,IAAI,EAAKrB,MAEjBsB,YAAY,EAAKC,eAAgB,MApBtB,EAuBbA,eAAiB,WACf,IAIIC,EAJQC,KAAKC,MAAM,EAAK1B,MACdyB,KAAKC,MAAM,IAAID,MAK7B,GAAGD,EAAS,EACVG,cAAcL,YAAY,EAAKC,eAAgB,MAC/C,EAAKV,SAAS,CAACZ,KAAK,OACpB,EAAKY,SAAS,CAACX,MAAM,OACrB,EAAKW,SAAS,CAACV,KAAK,OACpB,EAAKU,SAAS,CAACT,KAAK,WACjB,CACH,IAAIH,EAAO2B,KAAKC,MAAML,EAAQ,OAC1BtB,EAAQ0B,KAAKC,MAAOL,EAAQ,MAAT,MACnBM,EAAUF,KAAKC,MAAOL,EAAQ,KAAT,KACrBO,EAAUH,KAAKC,MAAOL,EAAQ,IAAkB,KACpDJ,QAAQC,IAAIpB,GACZmB,QAAQC,IAAInB,GACZkB,QAAQC,IAAIS,GACZV,QAAQC,IAAIU,GACZ,EAAKlB,SAAS,CAACZ,KAAKA,IACpB,EAAKY,SAAS,CAACX,MAAMA,IACrB,EAAKW,SAAS,CAACV,KAAK2B,IACpB,EAAKjB,SAAS,CAACT,KAAK2B,MA9CtB,EAAKb,MAAQ,CACXJ,MAAM,GACNK,OAAO,GACPlB,KAAK,GACLC,MAAM,GACNC,KAAK,GACLC,KAAK,IARI,E,0CAuDb,WACE,OACE,8BACI,cAAC,EAAD,CAAUL,aAAciC,KAAKrB,eAAgBb,SAAUkC,KAAKf,SAAUjB,KAAMgC,KAAKd,MAAMC,OACvFlB,KAAM+B,KAAKd,MAAMjB,KAAMC,MAAO8B,KAAKd,MAAMhB,MAAOC,KAAM6B,KAAKd,MAAMf,KAAMC,KAAM4B,KAAKd,MAAMd,a,GA/DhF6B,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6a12eb2d.chunk.js","sourcesContent":["import './Inputbox.css';\r\n\r\nconst Inputbox = ({Inputbox,searchChange,date,days,hours,mins,secs}) => {\r\n    return(\r\n        <div className=\"display\">\r\n            <h3>Timer ends on {date} </h3>\r\n            <h1>{days}-Days {hours}-Hours {mins}-Mins {secs}-Secs </h1>\r\n            <div>\r\n                <input type=\"text\" placeholder=\"01 January, 2020(format)\" onChange={searchChange}/>\r\n                <button onClick={Inputbox}>submit</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inputbox;","import './App.css';\nimport Inputbox from './Inputbox';\nimport React from 'react';\n\n\nclass App extends React.Component {\n\n  date;\n\n  constructor(){\n    super();\n    this.state = {\n      input:'',\n      update:'',\n      days:'',\n      hours:'',\n      mins:'',\n      secs:''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({input:event.target.value})\n  }\n  onSubmit = () => {\n    this.date = this.state.input;\n    this.setState({update:this.date})\n    console.log(this.date);\n    // this.calculateTimer();\n    setInterval(this.calculateTimer, 1000);\n  }\n\n  calculateTimer = () => {\n    let given = Date.parse(this.date);\n    let current = Date.parse(new Date());\n    // console.log(given);\n    // console.log(current);\n    let required = given - current;\n    // console.log(required);\n    if(required<0){\n      clearInterval(setInterval(this.calculateTimer, 1000));\n      this.setState({days:'00'});\n      this.setState({hours:'00'});\n      this.setState({mins:'00'});\n      this.setState({secs:'00'});\n    }else{\n      let days = Math.floor(required / (1000 * 60 * 60 * 24));\n      let hours = Math.floor((required % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      let minutes = Math.floor((required % (1000 * 60 * 60)) / (1000 * 60));\n      let seconds = Math.floor((required % (1000 * 60)) / 1000);\n      console.log(days);\n      console.log(hours);\n      console.log(minutes);\n      console.log(seconds);\n      this.setState({days:days});\n      this.setState({hours:hours});\n      this.setState({mins:minutes});\n      this.setState({secs:seconds});\n    }\n    \n  }\n\n \n\n  render(){\n    return (\n      <div >\n          <Inputbox searchChange={this.onSearchChange} Inputbox={this.onSubmit} date={this.state.update}\n          days={this.state.days} hours={this.state.hours} mins={this.state.mins} secs={this.state.secs}/>\n      </div>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}